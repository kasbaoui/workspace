package com.isban.p041buscadorcontenidos.integration;

import com.gruposantander.buscador.Buscador;
import com.gruposantander.buscador.ConfiguracionBuscador;
import com.gruposantander.buscador.ExcepcionBuscador;
import com.gruposantander.buscador.ParametrosBusqueda;
import com.gruposantander.buscador.ResultadoBusqueda;
import com.gruposantander.buscador.ayudantes.GeneradorCamposAdicionales;
import com.gruposantander.buscador.ayudantes.GeneradorOrdenacionPorCampos;
import com.gruposantander.buscador.ayudantes.GeneradorRestriccionesPorCampo;
import com.gruposantander.buscador.constantes.CamposAdicionales;
import com.gruposantander.buscador.constantes.TiposResaltado;
import com.gruposantander.buscador.constantes.TiposRestriccionPorCampo;
import com.gruposantander.buscador.constantes.TiposResumen;
import com.isb.portlet.fw.base.FrameworkUtils;
import com.isban.p041buscadorcontenidos.keys.P041BuscContenidosConst;
import com.isban.portales.utilidades.commons.utils.GenericUtils;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.Role;
import com.liferay.portal.model.User;
import com.liferay.portal.model.UserGroup;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.portlet.PortletException;
import javax.portlet.PortletPreferences;

import es.isban.portlets.exception.TechnicalErrorException;
import es.isban.portlets.user.UserManager;
import es.isban.portlets.user.exception.NoExistsUserException;

public class P041BuscContenidosAutonomyServiceUtil {

	/* PARSERS */
	public static final String FORMAT_DATE_PARAMS = "yyyy/MM/dd";
	public static final String FORMAT_DATE_PARAMS_AUT = "dd/MM/yyyy";

	/**
	 * Set the search parameters.
	 * 
	 * @return parametros necesarios para la busqueda
	 */
	private static ParametrosBusqueda getParametrosBusqueda(String text, String categoria, Date fromDate, Date toDate,
			boolean resaltado, boolean sugerencia, boolean paginador, int numPage, String tipo, String subtipo) {
		try {

			String dataSource = FrameworkUtils.getPortletProperty(P041BuscContenidosConst.IPF_PROP_IDOL_DATABASE);
			// dataSource = "IntranetPaaS";
			FrameworkUtils.getLogger().info("Autonomy dataSource [" + dataSource + "]");

			// Extra fields to return
			GeneradorCamposAdicionales camposAdicionales = new GeneradorCamposAdicionales();
			camposAdicionales.addCampo(CamposAdicionales.FECHA);
			camposAdicionales.addCampo(CamposAdicionales.VALORACION);

			// Constraints generation
			GeneradorRestriccionesPorCampo restricciones = new GeneradorRestriccionesPorCampo();
			restricciones.setRestriccion(CamposAdicionales.TIPO, tipo, TiposRestriccionPorCampo.CADENA);
			if (!GenericUtils.isEmpty(subtipo)) {
				restricciones.setRestriccion(CamposAdicionales.SUB_TIPO, subtipo, TiposRestriccionPorCampo.CADENA);
			}
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(FORMAT_DATE_PARAMS_AUT);
			String sFromDate = StringPool.SPACE;
			String sToDate = StringPool.SPACE;
			if (fromDate != null) {
				try {
					sFromDate = simpleDateFormat.format(fromDate);
				} catch (Exception e) {
					sFromDate = StringPool.SPACE;
				}
			}
			if (toDate != null) {
				try {
					sToDate = simpleDateFormat.format(toDate);
				} catch (Exception e) {
					sToDate = StringPool.SPACE;
				}
			}

			if (!GenericUtils.isEmpty(sFromDate) || !GenericUtils.isEmpty(sToDate)) {
				if (!sFromDate.equals(StringPool.SPACE) || !sToDate.equals(StringPool.SPACE)) {
					restricciones.setRestriccion(CamposAdicionales.FECHA, sFromDate + StringPool.COMMA + sToDate,
							TiposRestriccionPorCampo.FECHA);
				}
			}

			if (null != categoria && !StringPool.BLANK.equalsIgnoreCase(categoria)) {
				restricciones.setRestriccion(CamposAdicionales.CATEGORIA, categoria,
						TiposRestriccionPorCampo.SUB_CADENA_OR);
			}

			PortletPreferences prefs = FrameworkUtils.getPreferences();
			String prefFiltroIdioma = prefs.getValue(P041BuscContenidosConst.LR_PREF_FILTROIDIOMA, StringPool.BLANK);

			if (prefFiltroIdioma.equals("true")) {
				Locale idioma = FrameworkUtils.getLocale();
				restricciones.setRestriccion(CamposAdicionales.IDIOMA, idioma.toString(),
						TiposRestriccionPorCampo.CADENA);
			}

			String prefPersonalizacion = prefs.getValue(P041BuscContenidosConst.LR_PREF_PERSONALIZACION,
					StringPool.BLANK);
			if (prefPersonalizacion.equals("true")) {
				// restriccion de personalizacion
				String restPerso = getRestriccionPersonalizacion();
				restricciones.setRestriccion("_PERSONALIZACION", restPerso,
						TiposRestriccionPorCampo.SUB_CADENA_OR_VACIO);
			}

			// Order generation
			GeneradorOrdenacionPorCampos generadorOrdenacion = new GeneradorOrdenacionPorCampos();

			// Finally Search Settings
			ParametrosBusqueda paramsSearch = new ParametrosBusqueda();

			paramsSearch.setTexto(text);
			paramsSearch.setBaseDatos(dataSource);

			PortletPreferences pref = FrameworkUtils.getPreferences();
			String numElemPag = pref.getValue(P041BuscContenidosConst.LR_PREF_ELEMENTSPP,
					P041BuscContenidosConst.NUMERICAL_DEFAULT_VALUE_ELEMENTSPP);

			if (paginador)
				paramsSearch.setTamanoPagina(Integer.parseInt(numElemPag));

			paramsSearch.setTagInicioResaltado("<strong class=\"resaltadoAutonomy\"> ");

			paramsSearch.setNumeroPagina(numPage);

			if (resaltado) {
				paramsSearch.setTipoResaltado(TiposResaltado.TERMINOS);
			}
			paramsSearch.setCamposAdicionales(camposAdicionales.generarCampos());
			paramsSearch.setRestriccionesPorCampo(restricciones.generarRestricciones());
			paramsSearch.setRestriccionesPorCampo(restricciones.generarRestricciones());

			paramsSearch.setOrdenacionPorCampo(generadorOrdenacion.generarOrdenaciones());
			paramsSearch.setTipoResumen(TiposResumen.CONTEXTUAL);
			paramsSearch.setOutputEncoding("UTF-8");
			return paramsSearch;

		} catch (Exception e) {
			FrameworkUtils.getLogger().error(e.getMessage());
		}
		return null;
	}

	/**
	 * Execute the search with the properties settings and the input parameters
	 * 
	 * @param paramSearch
	 * @return the autonomy results
	 * @throws ExcepcionBuscador
	 */
	public static ResultadoBusqueda searcher(String text, String categoria, Date fromDate, Date toDate,
			boolean resaltado, boolean sugerencia, boolean paginador, int currentPage, String tipo, String subtipo)
			throws ExcepcionBuscador {

		ResultadoBusqueda searchResults = new ResultadoBusqueda();
		try {
			ParametrosBusqueda paramsBusq = getParametrosBusqueda(text, categoria, fromDate, toDate, resaltado,
					sugerencia, paginador, currentPage, tipo, subtipo);

			FrameworkUtils.getLogger().info("Search params: text [" + text + "] - categoria [" + categoria
					+ "] - fromDate [" + fromDate + "] - toDate [" + toDate + "] - resaltado [" + resaltado + "]");
			FrameworkUtils.getLogger().info("Search params: sugerencia [" + sugerencia + "] - paginador [" + paginador
					+ "] - currentPage [" + currentPage + "] - tipo [" + tipo + "] - subtipo [" + subtipo + "]");

			if (paramsBusq != null) {
				ConfiguracionBuscador config = new ConfiguracionBuscador();

				paramsBusq.setTipoResumen(TiposResumen.CONTEXTUAL);
				;

				String address = FrameworkUtils.getPortletProperty(P041BuscContenidosConst.IPF_PROP_IDOL_ADDRESS);
				address = "isbwvautoc0001.scisb.isban.corp";
				FrameworkUtils.getLogger().info("Autonomy Address [" + address + "]");

				if (address != null && !address.isEmpty()) {
					config.setServidor(address);
					int port = Integer
							.parseInt(FrameworkUtils.getPortletProperty(P041BuscContenidosConst.IPF_PROP_IDOL_PORT));
					FrameworkUtils.getLogger().info("Autonomy port [" + port + "]");

					config.setPuerto(port);
					Buscador searcher = new Buscador(config);
					FrameworkUtils.getLogger().info("Autonomy Address [" + paramsBusq.getParametricField() + "]");
					searchResults = searcher.buscarTexto(paramsBusq);
				}
			}

		} catch (Exception e) {
			FrameworkUtils.getLogger().error(e.getMessage());
			return searchResults;
		}

		return searchResults;
	}

	private static String getRestriccionPersonalizacion()
			throws NoExistsUserException, TechnicalErrorException, PortletException {

		String rolesYgrupos = StringPool.BLANK;
		try {
			User usuario = UserManager.getUser(FrameworkUtils.getUID());
			List<Role> roles = usuario.getRoles();
			for (int i = 0; i < roles.size(); i++) {
				String nombreRol = roles.get(i).getName();
				if (nombreRol.startsWith("IPF_")) {
					nombreRol = nombreRol.substring("IPF_".length());
					rolesYgrupos = rolesYgrupos + nombreRol + StringPool.COMMA;
				} else if (nombreRol.startsWith("EP_IPF_")) {
					nombreRol = nombreRol.substring("EP_IPF_".length());
					rolesYgrupos = rolesYgrupos + nombreRol + StringPool.COMMA;
				}
			}
			List<UserGroup> grupos = usuario.getUserGroups();
			for (int i = 0; i < grupos.size(); i++) {
				String nombreGrupo = grupos.get(i).getName();
				if (nombreGrupo.startsWith("IPF_")) {
					nombreGrupo = nombreGrupo.substring("IPF_".length());
					rolesYgrupos = rolesYgrupos + nombreGrupo + StringPool.COMMA;
				} else if (nombreGrupo.startsWith("EP_IPF_")) {
					nombreGrupo = nombreGrupo.substring("EP_IPF_".length());
					rolesYgrupos = rolesYgrupos + nombreGrupo + StringPool.COMMA;
				}
			}
		} catch (Exception e) {
			FrameworkUtils.getLogger().error(e.getMessage());
		}

		return rolesYgrupos;
	}
}
