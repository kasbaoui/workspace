package com.isban.p031navigation.integration;

import com.isb.portlet.fw.base.FrameworkUtils;
import com.isban.p031navigation.keys.P031NavigationKey;
import com.isban.p031navigation.model.TipoLink;
import com.isban.p031navigation.model.TipoPreferencia;
import com.isban.p031navigation.model.TipoPreferencias;
import com.isban.portales.servicios.liferayapi.estructuras.LRGrouper;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.xml.Document;
import com.liferay.portal.kernel.xml.DocumentException;
import com.liferay.portal.kernel.xml.Node;
import com.liferay.portal.kernel.xml.SAXReaderUtil;
import com.liferay.portal.model.Group;
import com.liferay.portal.model.Layout;
import com.liferay.portal.service.GroupLocalServiceUtil;
import com.liferay.portal.service.LayoutLocalServiceUtil;
import com.liferay.portal.theme.ThemeDisplay;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portlet.dynamicdatamapping.model.DDMStructure;
import com.liferay.portlet.dynamicdatamapping.service.DDMStructureLocalServiceUtil;
import com.liferay.portlet.journal.model.JournalArticle;
import com.liferay.portlet.journal.service.JournalArticleLocalServiceUtil;

import java.util.ArrayList;
import java.util.List;

import es.isban.portlets.util.PortalCommonUtil;

/**
 * The Class P031NavigationIntegration.
 */
public class P031NavigationIntegration {

	private P031NavigationIntegration() {
		throw new IllegalAccessError(P031NavigationKey.JSP_ERROR);
	}

	/**
	 * Returns links preferences List for selection combo
	 * 
	 * @param subtypeGrouper
	 * @param groupId
	 * @param themeDisplay
	 * @return
	 * @throws SystemException
	 * @throws PortalException
	 * @throws DocumentException
	 * @throws Exception
	 */
	public static TipoPreferencias getLinkPreferenciass(String subtypeGrouper, long groupId, ThemeDisplay themeDisplay)
			throws SystemException, PortalException, DocumentException {

		List<TipoPreferencia> listaLRGroupers = new ArrayList<TipoPreferencia>();
		TipoPreferencias list = new TipoPreferencias();

		Group globalGroup = GroupLocalServiceUtil.getCompanyGroup(PortalCommonUtil.getCompanyId());

		
		FrameworkUtils.getLogger().info("LRLinks search - Subtype [" + subtypeGrouper +"] - Site groupId [" + groupId + "] - Global groupId [" + globalGroup + "]");

		// Recupera las estructuras del sitio web
		List<DDMStructure> journalStructures = DDMStructureLocalServiceUtil.getStructures(globalGroup.getGroupId());
		for (DDMStructure journalStructure : journalStructures) {
			if (subtypeGrouper.equalsIgnoreCase(journalStructure.getNameCurrentValue())) {

				// Recupera los contenidos con la estructura seleccionada
				List<JournalArticle> journalArticles = JournalArticleLocalServiceUtil.getStructureArticles(groupId,
						journalStructure.getStructureKey());

				for (JournalArticle journalArticle : journalArticles) {

					// Recupera la ultim version del contenido y la parsea
					boolean isLastestOne = JournalArticleLocalServiceUtil.isLatestVersion(groupId,
							journalArticle.getArticleId(), journalArticle.getVersion());
					if (!journalArticle.isInTrash() && isLastestOne) {
						LRGrouper lrgrouper = new LRGrouper(journalArticle, FrameworkUtils.getLocale().toString(),
								themeDisplay);
						TipoPreferencia tp = new TipoPreferencia();
						tp.setId(journalArticle.getArticleId());
						tp.setNombre(journalArticle.getTitle(FrameworkUtils.getLocale().toString()));
						tp.setTitulo(journalArticle.getUrlTitle());
						tp.setTituloVisual(lrgrouper.getTituloVisual());
						tp.setTooltip(lrgrouper.getTooltip());
						tp.setCuerpo(lrgrouper.getCuerpo());
						tp.setEntradilla(lrgrouper.getEntradilla());
						tp.setAnalitica(lrgrouper.getAnalitica());
						listaLRGroupers.add(tp);
					}
				}
				list.setPreferencia(listaLRGroupers);
				list.setTotal(String.valueOf(listaLRGroupers.size()));
				break;
			}
		}

		FrameworkUtils.getLogger().info("LRLinks found [" + list.getTotal() +"]");

		return list;

	}

	/**
	 * Returns LRLink bean parsed from journalArticle
	 * 
	 * @param groupId
	 * @param urlTitle
	 * @return
	 * @throws DocumentException
	 * @throws PortalException
	 * @throws Exception
	 */
	public static TipoLink getLRLinkDetalle(long groupId, String urlTitle, ThemeDisplay themeDisplay)
			throws SystemException, DocumentException, PortalException {

		String locale = FrameworkUtils.getLocale().toString();
		TipoLink link = new TipoLink();

		// Recupera la ultima version del articulo seleccionado
		//JournalArticle journalArticle = JournalArticleLocalServiceUtil.fetchLatestArticle(groupId, articleId,
		//		WorkflowConstants.STATUS_APPROVED);
		JournalArticle journalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(groupId, urlTitle);
		
		// Parsea los campos de estructura del contenido en LRLink
		if (journalArticle != null) {

			String linkField = getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_URL, journalArticle, locale);

			link.setId(journalArticle.getArticleId());
			link.setUrlTitle(journalArticle.getUrlTitle());
			link.setTitulo(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_TITLE, journalArticle, locale));
			link.setTooltip(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_TOOLTIP, journalArticle, locale));
			link.setSubtipo(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_SUBTYPE, journalArticle, locale));
			link.setAnalitica(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_ANALYTIC, journalArticle, locale));
			link.setSubtitulo(journalArticle.getUrlTitle());
			link.setUrl(linkField == null || StringPool.BLANK.equals(linkField)
					? getUrlFromLTP(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_URL_LTP, journalArticle, locale),
							themeDisplay)
					: getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_URL, journalArticle, locale));
			link.setIndexacion(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_INDEXATION, journalArticle, locale));
			link.setTarget(getFieldValue(P031NavigationKey.LRLINK_STRUCTURE_TARGET, journalArticle, locale));
		}

		return link;

	}

	/**
	 * Parses structure field value
	 * 
	 * @param fieldname
	 * @param journalArticle
	 * @param locale
	 * @return
	 * @throws DocumentException
	 */
	private static String getFieldValue(String fieldname, JournalArticle journalArticle, String locale)
			throws DocumentException {
		Document document = SAXReaderUtil.read(journalArticle.getContentByLocale(locale));
		Node node = document.selectSingleNode("/root/dynamic-element[@name='" + fieldname + "']/dynamic-content");
		return node.getText().replace(StringPool.OPEN_BRACKET, StringPool.BLANK)
				.replace(StringPool.QUOTE, StringPool.BLANK).replace(StringPool.CLOSE_BRACKET, StringPool.BLANK);
	}

	/**
	 * Returns friendly URL from Link to Page field
	 * 
	 * @param ltp
	 * @return
	 * @throws SystemException
	 * @throws PortalException
	 */
	private static String getUrlFromLTP(String ltp, ThemeDisplay themeDisplay) throws PortalException, SystemException {

		String url = StringPool.BLANK;
		long layoutId = 0;
		boolean privateLayout = false;
		long groupId = 0;

		// Parsea el contenido del campo
		String[] params = ltp.split(StringPool.AT);
		if (params != null && params.length == 3) {
			layoutId = Long.parseLong(params[0]);
			privateLayout = params[1].equalsIgnoreCase(P031NavigationKey.LRLINK_STRUCTURE_URL_LTP_PUBLIC) ? false
					: true;
			groupId = Long.parseLong(params[2]);
		}

		// Busca el layout en el API de LR y recupera la friendly URL
		Layout layout = LayoutLocalServiceUtil.getLayout(groupId, privateLayout, layoutId);
		if (layout != null) {
			url = PortalUtil.getLayoutFriendlyURL(layout, themeDisplay);
			// url = layout.getFriendlyURL().replace(StringPool.SLASH,
			// StringPool.BLANK);
		}

		return url;
	}
}
